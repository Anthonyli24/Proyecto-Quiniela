--    // LOGIN Y REGISTRO \\


-- Procedimiento para validar login de usuario
CREATE PROCEDURE sp_ValidarLogin
    @nombre_usuario VARCHAR(50),
    @contraseña VARCHAR(100)
AS
BEGIN
    -- Variables para el resultado
    DECLARE @usuario_id INT
    DECLARE @nombre VARCHAR(100)
    DECLARE @correo VARCHAR(100)
    DECLARE @rol VARCHAR(50)
    DECLARE @estado VARCHAR(50)
    DECLARE @mensaje VARCHAR(200)

    -- Buscar el usuario con las credenciales proporcionadas
    SELECT
        @usuario_id = u.usuario_id,
        @nombre = u.nombre,
        @correo = u.correo,
        @rol = r.rol,
        @estado = u.estado
    FROM Usuario u
    INNER JOIN Rol r ON u.rol_id = r.rol_id
    WHERE u.nombre_usuario = @nombre_usuario
    AND u.contraseña = @contraseña

    -- Verificar el resultado
    IF @usuario_id IS NOT NULL
    BEGIN
        -- Verificar si el usuario está activo
        IF @estado = 'activo'
        BEGIN
            -- Login exitoso
            SET @mensaje = 'Login exitoso'
            SELECT
                1 as login_exitoso,
                @usuario_id as usuario_id,
                @nombre as nombre,
                @correo as correo,
                @rol as rol,
                @estado as estado,
                @mensaje as mensaje
        END
        ELSE
        BEGIN
            -- Usuario inactivo
            SET @mensaje = 'Usuario inactivo'
            SELECT
                0 as login_exitoso,
                NULL as usuario_id,
                NULL as nombre,
                NULL as correo,
                NULL as rol,
                @estado as estado,
                @mensaje as mensaje
        END
    END
    ELSE
    BEGIN
        -- Credenciales incorrectas
        SET @mensaje = 'Usuario o contraseña incorrectos'
        SELECT
            0 as login_exitoso,
            NULL as usuario_id,
            NULL as nombre,
            NULL as correo,
            NULL as rol,
            NULL as estado,
            @mensaje as mensaje
    END
END







--Procedimiento para registrar un usuario



CREATE PROCEDURE RegistrarUsuario
    @nombre VARCHAR(100),
    @correo VARCHAR(100),
    @nombre_usuario VARCHAR(50),
    @contraseña VARCHAR(100),
    @fecha_nacimiento DATE,
    @estado VARCHAR(50),
    @rol_id INT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Validar si ya existe el nombre de usuario o el correo
        IF EXISTS (SELECT 1 FROM Usuario WHERE nombre_usuario = @nombre_usuario OR correo = @correo)
        BEGIN
            THROW 50001, 'El nombre de usuario o correo ya están registrados.', 1;
        END

        -- Insertar el nuevo usuario
        INSERT INTO Usuario (nombre, correo, nombre_usuario, contraseña, fecha_nacimiento, estado, rol_id)
        VALUES (@nombre, @correo, @nombre_usuario, @contraseña, @fecha_nacimiento, @estado, @rol_id);

        PRINT 'Usuario registrado exitosamente.';
    END TRY
    BEGIN CATCH
        -- Manejo del error
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END;







--    // PROCEDIMIENTOS Y FUNCIONES ESPECIFICAS PARA  ADMINISTRADOR \\



-- Funcion para obtener los partidos

CREATE FUNCTION fn_ObtenerPartidos()
RETURNS TABLE
AS
RETURN
(
    SELECT * FROM Partido
);






--Procedimiento para Insertar partidos

CREATE PROCEDURE sp_InsertarPartido
           @FechaPartido DATE,
           @HoraPartido TIME,
           @EquipoLocal INT,
           @EquipoVisitante INT,
           @TorneoID INT
       AS
       BEGIN
           SET NOCOUNT ON;

           -- Validación 1: Fecha del partido no puede ser en el pasado
           IF @FechaPartido < CAST(GETDATE() AS DATE)
           BEGIN
               THROW 50001, 'La fecha del partido no puede estar en el pasado.', 1;
               RETURN;
           END

           -- Validación 2: Hora del partido no puede ser NULL
           IF @HoraPartido IS NULL
           BEGIN
               THROW 50002, 'La hora del partido es obligatoria.', 1;
               RETURN;
           END

           -- Validación 3: No se permiten equipos iguales
           IF @EquipoLocal = @EquipoVisitante
           BEGIN
               THROW 50003, 'El equipo local y visitante no pueden ser el mismo.', 1;
               RETURN;
           END

           -- Validación 4: Verificar que el torneo exista
           IF NOT EXISTS (SELECT 1 FROM Torneo WHERE torneo_id = @TorneoID)
           BEGIN
               THROW 50004, 'El torneo especificado no existe.', 1;
               RETURN;
           END

           -- Validación 5: Verificar que ambos equipos existan
           IF NOT EXISTS (SELECT 1 FROM Equipo WHERE equipo_id = @EquipoLocal)
           BEGIN
               THROW 50005, 'El equipo local no existe.', 1;
               RETURN;
           END

           IF NOT EXISTS (SELECT 1 FROM Equipo WHERE equipo_id = @EquipoVisitante)
           BEGIN
               THROW 50006, 'El equipo visitante no existe.', 1;
               RETURN;
           END

           -- Validación 6: El equipo local no debe tener otro partido ese día
           IF EXISTS (
               SELECT 1 FROM Partido
               WHERE fecha_partido = @FechaPartido
                 AND (equipo_local = @EquipoLocal OR equipo_visitante = @EquipoLocal)
           )
           BEGIN
               THROW 50007, 'El equipo local ya tiene un partido programado ese día.', 1;
               RETURN;
           END

           -- Validación 7: El equipo visitante no debe tener otro partido ese día
           IF EXISTS (
               SELECT 1 FROM Partido
               WHERE fecha_partido = @FechaPartido
                 AND (equipo_local = @EquipoVisitante OR equipo_visitante = @EquipoVisitante)
           )
           BEGIN
               THROW 50008, 'El equipo visitante ya tiene un partido programado ese día.', 1;
               RETURN;
           END

           -- Inserción del partido
           INSERT INTO Partido (
               estado_partido,
               goles_visitante,
               goles_local,
               fecha_partido,
               hora_partido,
               equipo_local,
               equipo_visitante,
               torneo_id
           )
           VALUES (
               'Pendiente',
               0,
               0,
               @FechaPartido,
               @HoraPartido,
               @EquipoLocal,
               @EquipoVisitante,
               @TorneoID
           );
       END;








CREATE  PROCEDURE sp_RegistrarQuiniela
    @QuinielaID INT,
    @Nombre VARCHAR(100),
    @Descripcion TEXT,
    @Reglas TEXT,
    @FechaInicioInscripciones DATE,
    @FechaFinalInscripciones DATE,
    @Estado VARCHAR(50),
    @Modalidad VARCHAR(50),
    @TipoPuntuacion VARCHAR(50),
    @TorneoID INT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Validar que el torneo exista
        IF NOT EXISTS (SELECT 1 FROM Torneo WHERE torneo_id = @TorneoID)
        BEGIN
            THROW 60001, 'El torneo especificado no existe.', 1;
        END

        -- Validar que las fechas no sean anteriores a hoy
        IF @FechaInicioInscripciones < CAST(GETDATE() AS DATE)
        BEGIN
            THROW 60002, 'La fecha de inicio de inscripciones no puede ser anterior a la fecha actual.', 1;
        END

        IF @FechaFinalInscripciones < CAST(GETDATE() AS DATE)
        BEGIN
            THROW 60003, 'La fecha final de inscripciones no puede ser anterior a la fecha actual.', 1;
        END

        -- Validar que la fecha inicio sea menor o igual que la fecha final
        IF @FechaInicioInscripciones > @FechaFinalInscripciones
        BEGIN
            THROW 60004, 'La fecha de inicio de inscripciones no puede ser posterior a la fecha final.', 1;
        END

        -- Validar que la fecha final de inscripción esté dentro del rango del torneo
        DECLARE @FechaCierreTorneo DATE;
        SELECT @FechaCierreTorneo = fecha_cierre FROM Torneo WHERE torneo_id = @TorneoID;

        IF @FechaFinalInscripciones > @FechaCierreTorneo
        BEGIN
            THROW 60005, 'La fecha final de inscripciones no puede ser posterior a la fecha de cierre del torneo.', 1;
        END

        -- Verificar que el ID de quiniela no exista ya
        IF EXISTS (SELECT 1 FROM Quiniela WHERE quiniela_id = @QuinielaID)
        BEGIN
            THROW 60006, 'Ya existe una quiniela con el ID proporcionado.', 1;
        END

        -- Insertar quiniela
        INSERT INTO Quiniela (
            quiniela_id,
            nombre,
            descripcion,
            reglas,
            fecha_inicio_inscripciones,
            fecha_final_inscripciones,
            estado,
            modalidad,
            tipo_puntuacion,
            torneo_id
        )
        VALUES (
            @QuinielaID,
            @Nombre,
            @Descripcion,
            @Reglas,
            @FechaInicioInscripciones,
            @FechaFinalInscripciones,
            @Estado,
            @Modalidad,
            @TipoPuntuacion,
            @TorneoID
        );

    END TRY
    BEGIN CATCH
        -- Manejo de errores
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        THROW 70000, @ErrorMessage, 1;
    END CATCH
END;

-- =============================================================================
-- PROCEDIMIENTO: usp_get_quinielas_ordenadas
-- Descripción: Devuelve todas las quinielas ordenadas
--   1) Primero por estado: Abierta → 0, Cerrada → 1, Finalizada → 2, otros → 3
--   2) Luego por fecha de inicio de inscripciones (más reciente primero)
-- =============================================================================
GO
CREATE OR ALTER PROCEDURE usp_get_quinielas_ordenadas
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        q.quiniela_id,
        q.nombre,
        q.descripcion,
        q.reglas,
        q.fecha_inicio_inscripciones,
        q.fecha_final_inscripciones,
        q.estado,
        q.modalidad,
        q.tipo_puntuacion,
        q.torneo_id
    FROM Quiniela AS q
    ORDER BY
      CASE q.estado
        WHEN 'Abierta'    THEN 0
        WHEN 'Cerrada'    THEN 1
        WHEN 'Finalizada' THEN 2
        ELSE 3
      END,
      q.fecha_inicio_inscripciones DESC;
END
GO

-- =============================================================================
-- PROCEDIMIENTO: usp_get_quiniela_con_partidos
-- Descripción : Devuelve los datos de una quiniela y sus partidos;
--               lanza error si la quiniela no existe
-- Parámetros  : @quiniela_id INT → clave primaria de la quiniela
-- ResultSet 1: Datos de la quiniela
-- ResultSet 2: Partidos pertenecientes a esa quiniela
-- =============================================================================
CREATE PROCEDURE usp_get_quiniela_con_partidos
    @quiniela_id INT
AS
BEGIN
    SET NOCOUNT ON;

    --------------------------------------------------
    -- 0) Validar existencia de la quiniela
    --------------------------------------------------
    IF NOT EXISTS (
        SELECT 1
          FROM Quiniela
         WHERE quiniela_id = @quiniela_id
    )
    BEGIN
        DECLARE @mensaje NVARCHAR(200);
        SET @mensaje = N'Quiniela con id '
                     + CAST(@quiniela_id AS NVARCHAR(10))
                     + N' no encontrada.';
        THROW 50001, @mensaje, 1;
    END

    --------------------------------------------------
    -- 1) Datos de la quiniela
    --------------------------------------------------
    SELECT
        q.quiniela_id,
        q.nombre,
        q.descripcion,
        q.reglas,
        q.fecha_inicio_inscripciones,
        q.fecha_final_inscripciones,
        q.estado,
        q.modalidad,
        q.tipo_puntuacion,
        q.torneo_id
    FROM Quiniela AS q
    WHERE q.quiniela_id = @quiniela_id;

    --------------------------------------------------
    -- 2) Partidos asociados a la quiniela
    --------------------------------------------------
    SELECT
        p.partido_id,
        p.estado_partido,
        p.fecha_partido,
        p.hora_partido,
        p.goles_local,
        p.goles_visitante
    FROM Partido AS p
    INNER JOIN Partido_Quiniela AS pq
        ON p.partido_id = pq.partido_id
    WHERE pq.quiniela_id = @quiniela_id
    ORDER BY p.fecha_partido, p.hora_partido;
END
GO