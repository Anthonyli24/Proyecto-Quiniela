-- =============================================================================
-- PROCEDIMIENTO: sp_ValidarLogin
-- Descripción : Valida las credenciales de un usuario para login.
--               Devuelve datos del usuario si el login es exitoso,
--               mensajes apropiados si el usuario está inactivo o si las credenciales son incorrectas.
-- Parámetros :
--    @nombre_usuario VARCHAR(50) → nombre de usuario
--    @contraseña VARCHAR(100) → contraseña en texto plano (se recomienda manejar con hash)
-- ResultSet : Resultado con indicador de éxito y datos del usuario o mensaje de error
-- =============================================================================
CREATE PROCEDURE sp_ValidarLogin
    @nombre_usuario VARCHAR(50),
    @contraseña VARCHAR(100)
AS
BEGIN
    DECLARE @usuario_id INT
    DECLARE @nombre VARCHAR(100)
    DECLARE @correo VARCHAR(100)
    DECLARE @rol VARCHAR(50)
    DECLARE @estado VARCHAR(50)
    DECLARE @mensaje VARCHAR(200)

    SELECT
        @usuario_id = u.usuario_id,
        @nombre = u.nombre,
        @correo = u.correo,
        @rol = r.rol,
        @estado = u.estado
    FROM Usuario u
    INNER JOIN Rol r ON u.rol_id = r.rol_id
    WHERE u.nombre_usuario = @nombre_usuario
    AND u.contraseña = @contraseña

    IF @usuario_id IS NOT NULL
    BEGIN
        IF @estado = 'activo'
        BEGIN
            SET @mensaje = 'Login exitoso'
            SELECT
                1 as login_exitoso,
                @usuario_id as usuario_id,
                @nombre as nombre,
                @correo as correo,
                @rol as rol,
                @estado as estado,
                @mensaje as mensaje
        END
        ELSE
        BEGIN
            SET @mensaje = 'Usuario inactivo'
            SELECT
                0 as login_exitoso,
                NULL as usuario_id,
                NULL as nombre,
                NULL as correo,
                NULL as rol,
                @estado as estado,
                @mensaje as mensaje
        END
    END
    ELSE
    BEGIN
        SET @mensaje = 'Usuario o contraseña incorrectos'
        SELECT
            0 as login_exitoso,
            NULL as usuario_id,
            NULL as nombre,
            NULL as correo,
            NULL as rol,
            NULL as estado,
            @mensaje as mensaje
    END
END


-- =============================================================================
-- PROCEDIMIENTO: RegistrarUsuario
-- Descripción : Registra un nuevo usuario validando que no exista el nombre_usuario o correo ya registrado.
-- Parámetros  :
--    @nombre VARCHAR(100)
--    @correo VARCHAR(100)
--    @nombre_usuario VARCHAR(50)
--    @contraseña VARCHAR(100)
--    @fecha_nacimiento DATE
--    @estado VARCHAR(50)
--    @rol_id INT
-- Uso : Inserta un nuevo registro en la tabla Usuario si no existe duplicado
-- =============================================================================
CREATE PROCEDURE RegistrarUsuario
    @nombre VARCHAR(100),
    @correo VARCHAR(100),
    @nombre_usuario VARCHAR(50),
    @contraseña VARCHAR(100),
    @fecha_nacimiento DATE,
    @estado VARCHAR(50),
    @rol_id INT
AS
BEGIN
    BEGIN TRY
        IF EXISTS (SELECT 1 FROM Usuario WHERE nombre_usuario = @nombre_usuario OR correo = @correo)
        BEGIN
            THROW 50001, 'El nombre de usuario o correo ya están registrados.', 1;
        END

        INSERT INTO Usuario (nombre, correo, nombre_usuario, contraseña, fecha_nacimiento, estado, rol_id)
        VALUES (@nombre, @correo, @nombre_usuario, @contraseña, @fecha_nacimiento, @estado, @rol_id);

        PRINT 'Usuario registrado exitosamente.';
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END;


-- =============================================================================
-- FUNCIÓN: fn_ObtenerPartidos
-- Descripción : Devuelve todos los registros de la tabla Partido
-- Resultado : Tabla con todos los partidos
-- =============================================================================
CREATE FUNCTION fn_ObtenerPartidos()
RETURNS TABLE
AS
RETURN
(
    SELECT * FROM Partido
);


-- =============================================================================
-- PROCEDIMIENTO: sp_InsertarPartido
-- Descripción : Inserta un partido validando:
--              - que la fecha no esté en el pasado
--              - que la hora no sea nula
--              - que equipos sean distintos
--              - existencia del torneo y equipos
--              - que los equipos no tengan otro partido el mismo día
-- Parámetros :
--    @FechaPartido DATE
--    @HoraPartido TIME
--    @EquipoLocal INT
--    @EquipoVisitante INT
--    @TorneoID INT
-- =============================================================================
CREATE PROCEDURE sp_InsertarPartido
           @FechaPartido DATE,
           @HoraPartido TIME,
           @EquipoLocal INT,
           @EquipoVisitante INT,
           @TorneoID INT
       AS
       BEGIN
           IF @FechaPartido < CAST(GETDATE() AS DATE)
           BEGIN
               THROW 50001, 'La fecha del partido no puede estar en el pasado.', 1;
               RETURN;
           END

           IF @HoraPartido IS NULL
           BEGIN
               THROW 50002, 'La hora del partido es obligatoria.', 1;
               RETURN;
           END

           IF @EquipoLocal = @EquipoVisitante
           BEGIN
               THROW 50003, 'El equipo local y visitante no pueden ser el mismo.', 1;
               RETURN;
           END

           IF NOT EXISTS (SELECT 1 FROM Torneo WHERE torneo_id = @TorneoID)
           BEGIN
               THROW 50004, 'El torneo especificado no existe.', 1;
               RETURN;
           END

           IF NOT EXISTS (SELECT 1 FROM Equipo WHERE equipo_id = @EquipoLocal)
           BEGIN
               THROW 50005, 'El equipo local no existe.', 1;
               RETURN;
           END

           IF NOT EXISTS (SELECT 1 FROM Equipo WHERE equipo_id = @EquipoVisitante)
           BEGIN
               THROW 50006, 'El equipo visitante no existe.', 1;
               RETURN;
           END

           IF EXISTS (
               SELECT 1 FROM Partido
               WHERE fecha_partido = @FechaPartido
                 AND (equipo_local = @EquipoLocal OR equipo_visitante = @EquipoLocal)
           )
           BEGIN
               THROW 50007, 'El equipo local ya tiene un partido programado ese día.', 1;
               RETURN;
           END

           IF EXISTS (
               SELECT 1 FROM Partido
               WHERE fecha_partido = @FechaPartido
                 AND (equipo_local = @EquipoVisitante OR equipo_visitante = @EquipoVisitante)
           )
           BEGIN
               THROW 50008, 'El equipo visitante ya tiene un partido programado ese día.', 1;
               RETURN;
           END

           INSERT INTO Partido (
               estado_partido,
               goles_visitante,
               goles_local,
               fecha_partido,
               hora_partido,
               equipo_local,
               equipo_visitante,
               torneo_id
           )
           VALUES (
               'Pendiente',
               0,
               0,
               @FechaPartido,
               @HoraPartido,
               @EquipoLocal,
               @EquipoVisitante,
               @TorneoID
           );
       END;


-- =============================================================================
-- PROCEDIMIENTO: sp_RegistrarQuiniela
-- Descripción : Registra una nueva quiniela con validaciones sobre fechas y existencia de torneo.
-- Parámetros  :
--    @Nombre VARCHAR(100)
--    @Descripcion TEXT
--    @Reglas TEXT
--    @FechaInicioInscripciones DATE
--    @FechaFinalInscripciones DATE
--    @Estado VARCHAR(50)
--    @Modalidad VARCHAR(50)
--    @TipoPuntuacion VARCHAR(50)
--    @TorneoID INT
-- =============================================================================
CREATE PROCEDURE sp_RegistrarQuiniela
    @Nombre VARCHAR(100),
    @Descripcion TEXT,
    @Reglas TEXT,
    @FechaInicioInscripciones DATE,
    @FechaFinalInscripciones DATE,
    @Estado VARCHAR(50),
    @Modalidad VARCHAR(50),
    @TipoPuntuacion VARCHAR(50),
    @TorneoID INT
AS
BEGIN
    BEGIN TRY
        IF NOT EXISTS (SELECT 1 FROM Torneo WHERE torneo_id = @TorneoID)
        BEGIN
            THROW 60001, 'El torneo especificado no existe.', 1;
        END

        IF @FechaInicioInscripciones < CAST(GETDATE() AS DATE)
        BEGIN
            THROW 60002, 'La fecha de inicio de inscripciones no puede ser anterior a la fecha actual.', 1;
        END

        IF @FechaFinalInscripciones < CAST(GETDATE() AS DATE)
        BEGIN
            THROW 60003, 'La fecha final de inscripciones no puede ser anterior a la fecha actual.', 1;
        END

        IF @FechaInicioInscripciones > @FechaFinalInscripciones
        BEGIN
            THROW 60004, 'La fecha de inicio de inscripciones no puede ser posterior a la fecha final.', 1;
        END

        DECLARE @FechaCierreTorneo DATE;
        SELECT @FechaCierreTorneo = fecha_cierre FROM Torneo WHERE torneo_id = @TorneoID;

        IF @FechaFinalInscripciones > @FechaCierreTorneo
        BEGIN
            THROW 60005, 'La fecha final de inscripciones no puede ser posterior a la fecha de cierre del torneo.', 1;
        END

        INSERT INTO Quiniela (
            nombre,
            descripcion,
            reglas,
            fecha_inicio_inscripciones,
            fecha_final_inscripciones,
            estado,
            modalidad,
            tipo_puntuacion,
            torneo_id
        )
        VALUES (
            @Nombre,
            @Descripcion,
            @Reglas,
            @FechaInicioInscripciones,
            @FechaFinalInscripciones,
            @Estado,
            @Modalidad,
            @TipoPuntuacion,
            @TorneoID
        );

    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        THROW 70000, @ErrorMessage, 1;
    END CATCH
END;


-- =============================================================================
-- PROCEDIMIENTO: usp_get_quinielas_ordenadas
-- Descripción : Devuelve todas las quinielas ordenadas primero por estado (Abierta, Cerrada, Finalizada, otros)
--               y luego por fecha de inicio de inscripciones descendente.
-- Resultado : Lista ordenada de quinielas
-- =============================================================================
CREATE OR ALTER PROCEDURE usp_get_quinielas_ordenadas
AS
BEGIN
    SELECT
        q.quiniela_id,
        q.nombre,
        q.descripcion,
        q.reglas,
        q.fecha_inicio_inscripciones,
        q.fecha_final_inscripciones,
        q.estado,
        q.modalidad,
        q.tipo_puntuacion,
        q.torneo_id
    FROM Quiniela AS q
    ORDER BY
      CASE q.estado
        WHEN 'Abierta'    THEN 0
        WHEN 'Cerrada'    THEN 1
        WHEN 'Finalizada' THEN 2
        ELSE 3
      END,
      q.fecha_inicio_inscripciones DESC;
END
GO

-- =============================================================================
-- PROCEDIMIENTO: usp_get_quiniela_con_partidos
-- Descripción : Devuelve los datos de una quiniela y sus partidos asociados.
--               Lanza error si la quiniela no existe.
-- Parámetros : @quiniela_id INT → clave primaria de la quiniela
-- ResultSet 1: Datos de la quiniela
-- ResultSet 2: Partidos pertenecientes a esa quiniela
-- =============================================================================
CREATE OR ALTER PROCEDURE usp_get_quiniela_con_partidos
@quiniela_id INT
AS
BEGIN
    IF NOT EXISTS (
        SELECT 1
        FROM Quiniela
        WHERE quiniela_id = @quiniela_id
    )
        BEGIN
            DECLARE @mensaje NVARCHAR(200);
            SET @mensaje = N'Quiniela con id '
                + CAST(@quiniela_id AS NVARCHAR(10))
                + N' no encontrada.';
            THROW 50001, @mensaje, 1;
        END

    SELECT
        q.quiniela_id,
        q.nombre,
        q.descripcion,
        q.reglas,
        q.fecha_inicio_inscripciones,
        q.fecha_final_inscripciones,
        q.estado,
        q.modalidad,
        q.tipo_puntuacion,
        q.torneo_id
    FROM Quiniela AS q
    WHERE q.quiniela_id = @quiniela_id;

    SELECT
        p.partido_id,
        el.nombre_equipo AS equipo_local,
        ev.nombre_equipo AS equipo_visitante,
        p.estado_partido,
        p.fecha_partido,
        p.hora_partido,
        p.goles_local,
        p.goles_visitante
    FROM Partido p
             INNER JOIN Partido_Quiniela pq ON p.partido_id = pq.partido_id
             INNER JOIN Equipo el ON p.equipo_local = el.equipo_id
             INNER JOIN Equipo ev ON p.equipo_visitante = ev.equipo_id
    WHERE pq.quiniela_id = @quiniela_id
    ORDER BY p.fecha_partido, p.hora_partido;
END


-- =============================================================================
-- PROCEDIMIENTO: usp_get_quinielas_disponibles
-- Descripción : Devuelve las quinielas activas a las que un usuario aún no se ha inscrito.
-- Parámetros : @usuario_id INT → clave primaria del usuario
-- Resultado : Lista de quinielas disponibles para inscripción por usuario
-- =============================================================================
CREATE OR ALTER PROCEDURE usp_get_quinielas_disponibles
    @usuario_id INT
AS
BEGIN
    SELECT
        q.quiniela_id,
        q.nombre,
        q.descripcion,
        q.reglas,
        q.fecha_inicio_inscripciones,
        q.fecha_final_inscripciones,
        q.estado,
        q.modalidad,
        q.tipo_puntuacion,
        q.torneo_id
    FROM Quiniela q
    WHERE q.estado = 'Activa'
      AND NOT EXISTS (
          SELECT 1
          FROM Inscripcion i
          WHERE i.quiniela_id = q.quiniela_id
            AND i.usuario_id = @usuario_id
      )
    ORDER BY
        CASE q.estado
            WHEN 'Abierta' THEN 0
            WHEN 'Cerrada' THEN 1
            WHEN 'Finalizada' THEN 2
            ELSE 3
        END,
        q.fecha_inicio_inscripciones DESC;
END;

-- =============================================================================
-- PROCEDIMIENTO: sp_CrearTorneo
-- Descripción : Inserta un nuevo torneo en la tabla Torneo y retorna su ID.
-- Parámetros :
--     @torneo_nombre     -> Nombre del torneo
--     @fecha_inicio      -> Fecha de inicio del torneo
--     @fecha_cierre      -> Fecha de cierre del torneo
--     @resultado_final   -> Resultado final del torneo (opcional)
--     @nuevo_torneo_id   -> OUTPUT: ID del torneo recién insertado
-- Resultado : Inserta el torneo y devuelve el ID generado
-- Notas :
--     - Valida que la fecha de inicio no sea posterior a la de cierre
--     - Usa TRY...CATCH para manejo de errores
-- =============================================================================
CREATE PROCEDURE sp_CrearTorneo
    @torneo_nombre VARCHAR(255),
    @fecha_inicio DATE,
    @fecha_cierre DATE,
    @resultado_final VARCHAR(255) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        IF @fecha_inicio < CAST(GETDATE() AS DATE)
        BEGIN
           RAISERROR('La fecha de inicio del torneo no puede estar en el pasado.', 16, 1);
           RETURN;
        END

        IF @fecha_inicio > @fecha_cierre
        BEGIN
            RAISERROR('La fecha de inicio no puede ser posterior a la fecha de cierre.', 16, 1);
            RETURN;
        END

        INSERT INTO Torneo (torneo_nombre, fecha_inicio, fecha_cierre, resultado_final)
        VALUES (@torneo_nombre, @fecha_inicio, @fecha_cierre, @resultado_final);
		SELECT 1;
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;

-- =============================================================================
-- PROCEDIMIENTO: sp_ObtenerPartidos
-- Descripción : Devuelve todos los registros de la tabla Partido, con los nombres de equipos y torneo
-- =============================================================================
CREATE OR ALTER PROCEDURE sp_ObtenerPartidos
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        p.partido_id,               -- 0
        el.nombre_equipo,           -- 1
        ev.nombre_equipo,           -- 2
        p.estado_partido,           -- 3
        p.fecha_partido,            -- 4
        p.hora_partido,             -- 5
        p.goles_local,              -- 6
        p.goles_visitante,          -- 7
        t.torneo_nombre             -- 8
    FROM Partido p
    INNER JOIN Equipo el ON p.equipo_local = el.equipo_id
    INNER JOIN Equipo ev ON p.equipo_visitante = ev.equipo_id
    INNER JOIN Torneo t ON p.torneo_id = t.torneo_id
    ORDER BY p.fecha_partido, p.hora_partido;
END;

EXEC sp_ObtenerPartidos;


select * from Torneo;

-- =============================================================================
-- PROCEDIMIENTO: sp_ObtenerNombresTorneos
-- Descripción : Devuelve una lista con los ID y nombres de todos los torneos
-- Resultado : Lista de torneos (torneo_id, torneo_nombre)
-- =============================================================================
CREATE OR ALTER PROCEDURE sp_ObtenerNombresTorneos
AS
BEGIN
    SET NOCOUNT ON;

    SELECT torneo_id, torneo_nombre
    FROM Torneo
    ORDER BY torneo_nombre;
END;

EXEC sp_ObtenerNombresTorneos;

-- =============================================================================
-- PROCEDIMIENTO: sp_ObtenerEquipos
-- Descripción : Devuelve una lista con los ID y nombres de todos los equipos
-- Resultado : Lista de equipos (equipo_id, nombre_equipo)
-- =============================================================================
CREATE OR ALTER PROCEDURE sp_ObtenerEquipos
AS
BEGIN
    SET NOCOUNT ON;

    SELECT equipo_id, nombre_equipo
    FROM Equipo
    ORDER BY nombre_equipo;
END;


-- =============================================================================
-- TRIGGER     : tr_InsertarPartidosEnPartidoQuiniela
-- Tabla       : Quiniela
-- Evento      : AFTER INSERT
-- Descripción : Al insertar una nueva quiniela, este trigger busca todos los
--              partidos del torneo asociado a esa quiniela e inserta en la
--              tabla Partido_Quiniela la relación correspondiente.
-- =============================================================================
CREATE TRIGGER tr_InsertarPartidosEnPartidoQuiniela
ON Quiniela
AFTER INSERT
AS
BEGIN
    INSERT INTO Partido_Quiniela (partido_id, quiniela_id)
    SELECT p.partido_id, i.quiniela_id
    FROM inserted i
    INNER JOIN Partido p ON p.torneo_id = i.torneo_id;
END;
GO


-- =============================================================================
-- TRIGGER     : tr_InsertarPartidoEnQuinielasRelacionadas
-- Tabla       : Partido
-- Evento      : AFTER INSERT
-- Descripción : Al insertar un nuevo partido, este trigger verifica si existe
--              alguna quiniela relacionada con el torneo del partido y, si es
--              así, crea el registro correspondiente en Partido_Quiniela solo
--              si no existe ya.
-- =============================================================================
CREATE TRIGGER tr_InsertarPartidoEnQuinielasRelacionadas
ON Partido
AFTER INSERT
AS
BEGIN
    INSERT INTO Partido_Quiniela (partido_id, quiniela_id)
    SELECT i.partido_id, q.quiniela_id
    FROM inserted i
    INNER JOIN Quiniela q ON q.torneo_id = i.torneo_id
    WHERE NOT EXISTS (
        SELECT 1
        FROM Partido_Quiniela pq
        WHERE pq.partido_id = i.partido_id AND pq.quiniela_id = q.quiniela_id
    );
END;
GO